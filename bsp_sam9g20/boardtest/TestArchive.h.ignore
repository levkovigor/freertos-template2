#include <board.h>
#include <bsp_sam9g20/comIF/GpioDeviceComIF.h>
#include <cstddef>

void performHkbDecoderTesting(uint8_t decoderSelect) {
    Pin pin[] = {PIN_GPIO06_INPUT, PIN_GPIO07_INPUT, PIN_GPIO08_INPUT,
            PIN_GPIO09_INPUT, PIN_GPIO10_INPUT, PIN_GPIO11_INPUT,
            PIN_GPIO12_INPUT, PIN_GPIO13_INPUT};
    PIO_Configure(pin, PIO_LISTSIZE(pin));
    switch(decoderSelect) {
    case 0: GpioDeviceComIF::enableDecoder1(); break;
    case 1: GpioDeviceComIF::enableDecoder2(); break;
    case 2: GpioDeviceComIF::enableDecoder3(); break;
    case 3: GpioDeviceComIF::enableDecoder4(); break;
    }

    switch(counter) {

    case 0: {
        sif::info << "New decoder cycle for decoder " << (int)decoderSelect + 1
                << std::endl;
        GpioDeviceComIF::enableDecoderOutput1();
        sif::info << "Output with output 1 enabled: ";
        printDecoderOutput();
        break;
    }
    case 1: {
        GpioDeviceComIF::enableDecoderOutput2();
        sif::info << "Output with output 2 enabled: ";
        printDecoderOutput();
        break;
    }
    case 2: {
        GpioDeviceComIF::enableDecoderOutput3();
        sif::info << "Output with output 3 enabled: ";
        printDecoderOutput();
        break;
    }
    case 3: {
        GpioDeviceComIF::enableDecoderOutput4();
        sif::info << "Output with output 4 enabled: ";
        printDecoderOutput();
        break;
    }
    case 4: {
        GpioDeviceComIF::enableDecoderOutput5();
        sif::info << "Output with output 5 enabled: ";
        printDecoderOutput();
        break;
    }
    case 5: {
        GpioDeviceComIF::enableDecoderOutput6();
        sif::info << "Output with output 6 enabled: ";
        printDecoderOutput();
        break;
    }
    case 6: {
        GpioDeviceComIF::enableDecoderOutput7();
        sif::info << "Output with output 7 enabled: ";
        printDecoderOutput();
        break;
    }
    case 7: {
        GpioDeviceComIF::enableDecoderOutput8();
        sif::info << "Output with output 8 enabled: ";
        printDecoderOutput();
        break;
    }
    }

    if(counter == 7) {
        counter = 0;
    }
    else {
        counter++;
    }
}

void printDecoderOutput() {
    bool gpioStat1 = GpioDeviceComIF::getGPIO(addresses::GPIO06, false);
    bool gpioStat2 = GpioDeviceComIF::getGPIO(addresses::GPIO07, false);
    bool gpioStat3 = GpioDeviceComIF::getGPIO(addresses::GPIO08, false);
    bool gpioStat4 = GpioDeviceComIF::getGPIO(addresses::GPIO09, false);
    bool gpioStat5 = GpioDeviceComIF::getGPIO(addresses::GPIO10, false);
    bool gpioStat6 = GpioDeviceComIF::getGPIO(addresses::GPIO11, false);
    bool gpioStat7 = GpioDeviceComIF::getGPIO(addresses::GPIO12, false);
    bool gpioStat8 = GpioDeviceComIF::getGPIO(addresses::GPIO13, false);
    sif::info << "[1: " << (int)gpioStat1
            << ", 2: " << (int) gpioStat2
            << ", 3: " << (int) gpioStat3
            << ", 4: " << (int) gpioStat4
            << ", 5: " << (int) gpioStat5
            << ", 6: " << (int) gpioStat6
            << ", 7: " << (int) gpioStat7
            << ", 8: " << (int) gpioStat8 << "]" << std::endl;
}


//#include <memories/sdmmc/MEDSdcard.h>
//#include <bsp_sam9g20/at91/tinyfatfs/include/tinyfatfs/tff.h>
//#include <peripherals/pio/pio.h>
//#include <utility/trace.h>
//Media medias[1];

// name-clash with HCC lib.
//void AtmelTestTask::tinyfatFsTest(void) {
//    FATFS fs;
//    FIL fileObject;
//
//#ifdef ISIS_OBC_G20
//    uint8_t sdCard = 0;
//    Pin sdSelectPin[1] = {PIN_SDSEL};
//    PIO_Configure(sdSelectPin, PIO_LISTSIZE(sdSelectPin));
//    bool high = PIO_Get(sdSelectPin);
//    if(high) {
//        PIO_Clear(sdSelectPin);
//    }
//    else {
//        PIO_Set(sdSelectPin);
//    }
//    if(sdCard == 0) {
//        PIO_Set(sdSelectPin);
//    }
//    else {
//        PIO_Clear(sdSelectPin);
//    }
//
//
//    Pin npWrPins[2] = {PIN_NPWR_SD0, PIN_NPWR_SD1};
//    PIO_Configure(npWrPins, PIO_LISTSIZE(npWrPins));
//    if(sdCard == 0) {
//        PIO_Clear(npWrPins);
//    }
//    if(sdCard == 1) {
//        PIO_Clear(npWrPins + 1);
//    }

//    Pin pinsMci1Off[2] = {PINS_MCI1_OFF};
//    PIO_Configure(pinsMci1Off, PIO_LISTSIZE(pinsMci1Off));
//    PIO_Set(pinsMci1Off);
//    PIO_Set(pinsMci1Off +  1);

//#endif
//
//    const int ID_DRV = 0;
//    MEDSdcard_Initialize(&medias[ID_DRV], 0);
//
//    memset(&fs, 0, sizeof(FATFS));  // Clear file system object
//    int res = f_mount(0, &fs);
//    if( res != FR_OK ) {
//        printf("f_mount pb: 0x%X\n\r", res);
//    }

//    char file_name [strlen(config::SW_REPOSITORY) + strlen(config::SW_UPDATE_SLOT_NAME) + 2];
//    snprintf(file_name, sizeof (file_name) + 1, "/%s/%s", config::SW_REPOSITORY,
//            config::SW_UPDATE_SLOT_NAME);

//#ifdef ISIS_OBC_G20
//    PIO_Set(npWrPins);
//    for(int idx = 0; idx < 100000; idx++) {};
//    PIO_Clear(npWrPins);
//#endif

//    res = f_open(&fileObject, "test.bin", FA_OPEN_EXISTING|FA_READ);
//    if( res != FR_OK ) {
//        TRACE_ERROR("f_open read pb: 0x%X\n\r", res);
//    }

//    res = f_open(&fileObject, file_name, FA_OPEN_EXISTING|FA_READ);
//    if( res != FR_OK ) {
//        TRACE_ERROR("f_open read pb: 0x%X\n\r", res);
//    }

//    size_t bytes_read = 0;
//    uint8_t* alotofMemory= new uint8_t[200000];
//    res = f_read(&fileObject, (void*) alotofMemory, 3, &bytes_read);
//    if(res != FR_OK) {
//        TRACE_ERROR("f_read pb: 0x%X\n\r", res);
//    }

//    delete(alotofMemory);
//}