	/**
	 * This helper function returns the zero padded string version of a number.
	 * The type is deduced automatically.
	 * TODO: This uses dynamic memory allocation, so we should provide
	 * a custom streambuf class to use it (which takes maxSize as argument)
	 * Then we would propably
	 * @tparam T
	 * @param num
	 * @param width
	 * @return
	 */
	template<typename T>
	static ReturnValue_t zeroPadded(char* string, size_t maxSize, const T& num,
			uint8_t width) {
		auto numString = std::to_string(num);
		uint8_t i = 0;
		for(i = 0; i < width; i++) {
			stringToFill[i] = '0';
		}
		numString.copy(stringToFill.data() + i, numString.size());
		return HasReturnvaluesIF::RETURN_OK;
	}